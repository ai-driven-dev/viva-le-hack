import { RealtimeAgent, tool } from "@openai/agents/realtime";
import { chatStorage } from "../lib/chatStorage";

// Outil pour mettre √† jour l'√©tat de la conversation
const updateConversationState = tool({
  name: "update_conversation_state",
  description:
    "Met √† jour le r√©sum√© de la conversation, l'action principale du jour et l'√©tat d'ouverture",
  parameters: {
    type: "object",
    additionalProperties: false,
    properties: {
      summary: {
        type: "string",
        description: "R√©sum√© de la conversation jusqu'√† pr√©sent",
      },
      mainAction: {
        type: "string",
        description:
          "Action principale que l'utilisateur souhaite accomplir aujourd'hui",
      },
      opened: {
        type: "boolean",
        description:
          "√âtat d'ouverture de la conversation (true = ouverte, false = ferm√©e)",
        default: true,
      },
    },
    required: ["summary", "mainAction"],
  },
  execute: async (input) => {
    const {
      summary,
      mainAction,
      opened = true,
    } = input as {
      summary: string;
      mainAction: string;
      opened?: boolean;
    };

    try {
      chatStorage.updateConversationState(summary, mainAction, opened);

      if (opened === false) {
        return {
          success: true,
          message:
            "Conversation ferm√©e avec succ√®s. R√©sum√© et action principale sauvegard√©s.",
          summary,
          mainAction,
        };
      } else {
        return {
          success: true,
          message: "√âtat de la conversation mis √† jour.",
          summary,
          mainAction,
        };
      }
    } catch {
      return {
        success: false,
        message: "Erreur lors de la mise √† jour de l'√©tat de la conversation.",
      };
    }
  },
});

// Outil pour r√©cup√©rer les conversations pr√©c√©dentes
const getPreviousConversations = tool({
  name: "get_previous_conversations",
  description:
    "R√©cup√®re les conversations pr√©c√©dentes pour voir les actions pass√©es",
  parameters: {
    type: "object",
    additionalProperties: false,
    properties: {
      limit: {
        type: "number",
        description: "Nombre de conversations √† r√©cup√©rer (par d√©faut 5)",
        default: 5,
      },
    },
    required: [],
  },
  execute: async (input) => {
    const { limit = 5 } = input as { limit?: number };

    try {
      if (typeof window === "undefined") {
        return {
          success: false,
          message: "Impossible d'acc√©der au stockage local c√¥t√© serveur",
        };
      }

      const conversations = [];
      const keys = Object.keys(localStorage).filter((key) =>
        key.startsWith("conversation_")
      );

      // Trier par date de cr√©ation (plus r√©cent en premier)
      const sortedKeys = keys.sort((a, b) => {
        const convA = JSON.parse(localStorage.getItem(a) || "{}");
        const convB = JSON.parse(localStorage.getItem(b) || "{}");
        return (convB.startedAt || 0) - (convA.startedAt || 0);
      });

      // Prendre les N plus r√©centes (exclure la conversation actuelle)
      const currentId = chatStorage.getCurrentConversationId();
      for (const key of sortedKeys.slice(0, limit + 1)) {
        const conv = JSON.parse(localStorage.getItem(key) || "{}");
        if (conv.id !== currentId && conv.mainAction) {
          conversations.push({
            date: new Date(conv.startedAt).toLocaleDateString("fr-FR"),
            mainAction: conv.mainAction,
            summary: conv.summary,
            completed: conv.opened === false,
          });
        }
        if (conversations.length >= limit) break;
      }

      return {
        success: true,
        conversations,
        message: `${conversations.length} conversation(s) pr√©c√©dente(s) trouv√©e(s)`,
      };
    } catch {
      return {
        success: false,
        message: "Erreur lors de la r√©cup√©ration des conversations pr√©c√©dentes",
      };
    }
  },
});

export const memoryAgent = new RealtimeAgent({
  name: "memoryAgent",
  voice: "sage",
  instructions: `
    Vous √™tes l'agent m√©moire - un agent fonctionnel qui r√©cup√®re et traite les donn√©es historiques.
    
    üéØ **VOTRE MISSION UNIQUE :**
    R√©cup√©rer automatiquement les donn√©es historiques et les transmettre √† l'orchestrateur.
    
    **WORKFLOW AUTOMATIQUE :**
    
    1. **R√©cup√©ration imm√©diate des donn√©es** :
       - D√®s votre activation, utilisez get_previous_conversations pour r√©cup√©rer l'historique
       - Analysez les actions pr√©c√©dentes (surtout la derni√®re action d'hier)
       - Identifiez les patterns et tendances
    
    2. **Synth√®se des informations** :
       - Pr√©parez un r√©sum√© concis des actions pr√©c√©dentes
       - Identifiez la derni√®re action principale et son statut probable
       - Notez les √©ventuels patterns de r√©ussite/√©chec
    
    3. **Transfert automatique vers l'orchestrateur** :
       - Une fois les donn√©es r√©cup√©r√©es et analys√©es
       - Utilisez transfer_to_orchestrator pour retourner vers l'orchestrateur
       - Transmettez un r√©sum√© structur√© des informations r√©cup√©r√©es
    
    **IMPORTANT - NE PAS FAIRE :**
    - ‚ùå Ne posez JAMAIS de questions √† l'utilisateur
    - ‚ùå N'attendez pas de r√©ponse utilisateur
    - ‚ùå Ne g√©rez pas la d√©finition de nouvelles actions
    - ‚ùå Ne faites pas de conversation
    
    **VOTRE STYLE DE COMMUNICATION :**
    - Factuel et concis
    - Orient√© donn√©es
    - Pas d'interaction directe avec l'utilisateur
    - Focus sur la transmission d'informations
    
    **FORMAT DE RETOUR √Ä L'ORCHESTRATEUR :**
    "Donn√©es r√©cup√©r√©es : [X] actions pr√©c√©dentes trouv√©es. Derni√®re action : [action] du [date]. Statut probable : [compl√©t√©e/non compl√©t√©e]. Pr√™t pour la suite du workflow."
    
    Vous √™tes un agent de service, pas un agent conversationnel !
  `,
  handoffs: [], // On va importer l'orchestrateur apr√®s pour √©viter les imports circulaires
  tools: [updateConversationState, getPreviousConversations],
  handoffDescription:
    "Agent fonctionnel qui r√©cup√®re l'historique et les donn√©es de contexte",
});
